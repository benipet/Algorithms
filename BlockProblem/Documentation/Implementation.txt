Datatypes
-----------

	Name		Type		Description
--------------------------------------------------------------------
	pos		struct		position structure
	blck		struct		block structure
	stck		struct		stack structure

	pos.index	unsigned int	index number of the position
	pos.addr_tbl	pos*		address of the first position(table)
	pos.addr_next	pos*		address of the next position	
	pos.addr_blck	blck*		address of the block on position

	blck.index	unsigned int	index of the block
	blck.base	pos*		address of the HOME of block
	blck.above	blck*		address of the next block
	blck.bottom	blck*		address of the prev block
	blck.pos	pos*		address of the block current position
	
	stck.block	unsigned int	index of the block
	stck.pos	unsigned int	index of the position
	stck.size	unsigned int	size of the stack from block
	

Functions
----------

--------------------------------------------------------------------------------
			POSITION FUNCTIONS
--------------------------------------------------------------------------------
Prototype: pos* init_table(void)
Description: Allocate a table with position 0. And Initialize a block on its base.
Parameters: void
Returns value: address of table
--------------------------------------------------------------------------------

Prototype: void build_position(pos* table, int size)
Description:Allocate a new position and attach it to the last member of the table position. Also initialize a block on its base.
Parameters: pointer to the table
Returns value: void 
--------------------------------------------------------------------------------
			BLOCK FUNCTIONS
--------------------------------------------------------------------------------

Prototype:blck* init_block(pos* base)
Description:Allocate a block structure in the memory, and sets the base address. The position address is the base. The block returns the itself address.
Parameters: void
Returns value: block pointer
--------------------------------------------------------------------------------
Prototype: int link_block(blck* above)
Description: Sets the block.next_block with the received address. 
	//The function checks, the above link is assigned or not
	//If the above link is busy: print out: sorry I am busy and returns 0
	//If not not assigned: sets the link with the received address
	//And sets the position address
Parameters: pointer to the new above block
Returns value: status
--------------------------------------------------------------------------------
Prototype: int ulink_block(blck* a_block, blck* b_block)
Description: The function sets the above address 0 if not. 
	//The function returns 0 if the unlinking is success 
	//and 1 if not (if the above address is exists)	
Parameters: void
Returns value: integer status

--------------------------------------------------------------------------------

Prototype: int get_blpos(blck* block, int OPTION);
Description: Returns the current position index
Parameters: the block address
Returns value: returns an integer number, or pos_address

--------------------------------------------------------------------------------

Prototype: int get_base(blck* block, int OPTION)
Description: Returns the base number or base address
Parameters: block address
Returns value: integer, or pointer
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
			STACK FUNCTIONS
--------------------------------------------------------------------------------

Prototype: stck* init_stack(void)
Description: Allocate a stack in the memory
Parameters: void
Returns value: Pointer to the stack

--------------------------------------------------------------------------------
Prototype:void kill_stack(stck* stack);
Description:Deallocate a stack from the memory
Parameters:stack pointer
Returns value:void
--------------------------------------------------------------------------------
Prototype:stck* define_stack(pos* table, int index)
Description:Find the block and define the block of stack.
	
Parameters: table pointer, wanted index
Returns value: wanted stack
--------------------------------------------------------------------------------
Prototype:stck* update_stack(pos* position, int index)
Description: 
	//Call the define_stack just with the position parameter
	
Parameters: position, and the block index
Returns value: new stack
--------------------------------------------------------------------------------
Prototype: int cmp_stack(pos* table, int a_index, int b_index)
Description: Compare a and b block is on same stack or not
	//1. Define stack with a->index
	//2. Define stack with b->index
	//3. Compare the a->pos and b->pos if same -> same stack
	//4. Display on the std.output if same
Parameters:block of a and block of b indexes
Returns value:
	1 if on same
	0 if different
--------------------------------------------------------------------------------
Prototype: void demolish_stack(pos* table, int blockIndex)
Description: Demolish the stack on the given block Index
	//Define a stack on the given parameters
	//blck* dem = block_addr->above (where size > 0)
	//while (dem->addr_above!=0)
	unlink(dem)
	dem=dem->addr_above 
	 
Parameters:
Returns value:
--------------------------------------------------------------------------------

Prototype:
Description:
Parameters:
Returns value:
--------------------------------------------------------------------------------






